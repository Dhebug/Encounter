INLINE music%,28976
INLINE ball%,872
INLINE vide%,1024
INLINE null%,32
INLINE replay%,16
INLINE logo%,2480
INLINE tramage%,4800
INLINE old_palette%,32
INLINE pic_back%,13178
INLINE gradient%,512
INLINE pal_src%,32
INLINE pal_dst%,32
INLINE ca_unpack%,288
INLINE freyda%,9586
INLINE pic_endtitle%,8091
'
'
' 'Forgotten Bits'
' A demo by Dbug started in 1991,
' abandonned in 1992,
' rediscovered and finished in 2008 :)
' Music by Tomchi from Noextra
'
zik=1
'
sauve_tout
lance_musique
initialisations
affiche_picture(pic_back%,50*4)
' GOTO skipit
affiche_logo(50*4)
scrolle("Let's start with some dots...")
affiche_dots(50*15)
' GOTO skipit
scrolle("I'm sure you like highlighted 3D !!!")
affiche_lighted_plane(180)
' GOTO skipit
scrolle("Oh dear ! You have a STE ???")
affiche_moving_back
scrolle("I love cubes :)")
affiche_cube(50*3)
scrolle("The mandatory Fantazy Woman¿ !")
affiche_picture(freyda%,50*5)
scrolle("Do you like starfields ???")
affiche_etoiles(50*20)
scrolle("Thanks for watching!")
affiche_picture(pic_endtitle%,50*5)
skipit:
restaure_tout
stoppe_musique
EDIT
'
' Routines d'ordre g‚n‚ral
'
'
> PROCEDURE infos
  vide_buffer
  screen
  CLS
  SETCOLOR 15,&H700
  PRINT "M‚moire GFA:";FRE(0)
  PRINT "M‚moire SYS:";MALLOC(-1)
  ~INP(2)
  vide_buffer
RETURN
> PROCEDURE sauve_tout
  ON ERROR GOSUB restaure_tout
  ON BREAK GOSUB restaure_tout
  '
  ' On passe en superviseur et on sauve tout
  '
  old_pile%=GEMDOS(&H20,L:FALSE)
  old_rez&=CARD{&H44C}
  old_video%=LONG{&H44E}
  old_click|=BYTE{&H484}
  old_vbl%=LONG{&H4D2}
  BMOVE &HFFFF8240,old_palette%,32
  OUT 4,18
  BYTE{&H484}=0
  '
  ' D‚tection blitter
  '
  ~XBIOS(&H40,1)
  IF XBIOS(&H40,TRUE)=0
    blitter!=FALSE
  ELSE
    blitter!=TRUE
  ENDIF
RETURN
> PROCEDURE restaure_tout
  stoppe_musique
  BYTE{&H484}=old_click|
  LONG{&H4D2}=old_4d2%
  BYTE{&HFF8265}=0
  BYTE{&HFF820F}=0
  ~XBIOS(5,L:old_video%,L:old_video%,W:rez&)
  BMOVE old_palette%,&HFFFF8240,32
  ~GEMDOS(&H20,L:old_pile%)
  ~MFREE(buffer%)
  OUT 4,8
  EDIT
RETURN
> PROCEDURE initialisations
  RESERVE 100000
  '
  '
  ' Variables concernant le scrolling rebondissant
  '
  '
  RESTORE degrade_scrolle
  FOR i=0 TO 41
    READ couleur
    degrade$=degrade$+MKI$(couleur)
  NEXT i
  degrade$=degrade$+degrade$
  degrade$=degrade$+degrade$
  degrade$=degrade$+degrade$
  '
  '
  ' Variables concernant le cube en 3D
  '
  '
  '
  ' Variables concernant le fonds d'‚toiles en 3D
  '
  '
  DIM ty&(200),tx&(320),tb&(320)
  '
  ' Tables de pr‚calcul pour les offsets verticaux et horizontaux
  '
  FOR i|=0 TO 199
    ty&(i|)=MUL(i|,160)
  NEXT i|
  '
  FOR i&=0 TO 319
    tx&(i&)=SHL(SHR(i&,4),3)
    tb&(i&)=SUB(15,(i& AND 15))
  NEXT i&
  '
RETURN
> PROCEDURE palette_noire
  BMOVE vide%,&HFFFF8240,32
RETURN
> PROCEDURE t
  OPTION BASE 0
  DIM xx&(50)
  x&=5
  debut=TIMER
  FOR i&=1 TO 200
    '
    DRAW 50,50 TO 100,100
    '
  NEXT i&
  duree=TIMER-debut
  PRINT duree
  ~INP(2)
  EDIT
RETURN
> PROCEDURE screen
  ~XBIOS(5,L:old_video%,L:old_video%,W:TRUE)
RETURN
> PROCEDURE installe_double_ecran
  buffer%=MALLOC(64256)
  '
  e1%=(buffer% AND &HFFFFFF00)+256
  e2%=ADD(e1%,32000)
  nettoie(e1%,64000)
  '
  ~XBIOS(5,L:e1%,L:e2%,TRUE)
RETURN
> PROCEDURE libere_double_ecran
  ~MFREE(buffer%)
RETURN
> PROCEDURE vide_buffer
  REPEAT
  UNTIL INKEY$=""
RETURN
> PROCEDURE nettoie(debut%,longueur%)
  LOCAL fin%
  fin%=ADD(debut%,longueur%)
  WHILE SUB(fin%,1000)>debut%
    BMOVE vide%,debut%,1000
    ADD debut%,1000
  WEND
  BMOVE vide%,debut%,SUB(fin%,debut%)
RETURN
> PROCEDURE lance_musique
  IF zik=1
    z$=MKL$(&H48E7FFFE)+MKL$(&H70014EB9)+MKL$(music%)+MKL$(&H4CDF7FFF)+MKI$(&H4E75)
    z%=V:z$
    CALL z%
    LONG{replay%}=&H48E7FFFE      ! movem.l d0-a6,-(sp)
    CARD{replay%+4}=&H4EB9        ! jsr
    LONG{replay%+6}=music%+8      ! music+8
    LONG{replay%+10}=&H4CDF7FFF   ! movem.l (sp)+,d0-a6
    CARD{replay%+14}=&H4E75       ! rts
    LONG{&H4D2}=replay%
  ENDIF
RETURN
> PROCEDURE stoppe_musique
  IF zik=1
    LONG{&H4D2}=old_4d2%
    z$=MKL$(&H48E7FFFE)+MKL$(&H70004EB9)+MKL$(music%)+MKL$(&H4CDF7FFF)+MKI$(&H4E75)
    z%=V:z$
    CALL z%
  ENDIF
RETURN
> PROCEDURE affiche_logo(duration&)
  palette_noire
  screen
  CLS
  '
  IF blitter!=FALSE
    FOR y=0 TO 33
      BMOVE logo%+32+y*8*9,old_video%+(y+80)*160+48,8*9
    NEXT y
    ~XBIOS(6,L:logo%)
  ELSE
    ~XBIOS(6,L:logo%)
    '
    ' 34 de haut par 72 de large
    '
    FOR i|=1 TO 149
      VSYNC
      trame_blitter
    NEXT i|
    PAUSE duration&
    FOR i|=149 DOWNTO 1
      VSYNC
      trame_blitter
    NEXT i|
  ENDIF
  '
  '
  palette_noire
  screen
  CLS
RETURN
> PROCEDURE trame_blitter
  BMOVE ADD(tramage%,MUL(i|,32)),&HFFFF8A00,32
  CARD{&HFFFF8A20}=2                 ! Incr‚ment horizontal
  CARD{&HFFFF8A22}=2                 ! Incr‚ment vertical
  LONG{&HFFFF8A24}=logo%+32          ! Source
  CARD{&HFFFF8A2E}=2                       ! Incr‚ment horizontal
  CARD{&HFFFF8A30}=90                      ! Incr‚ment vertical
  LONG{&HFFFF8A32}=old_video%+48+160*75    ! dest
  CARD{&HFFFF8A36}=36                           ! Nb col
  CARD{&HFFFF8A38}=34                           ! Nb lignes
  BYTE{&HFFFF8A3D}=0
  BYTE{&HFFFF8A3A}=3                  ! Source only  !2
  BYTE{&HFFFF8A3B}=3                  ! Graphmode    !3
  BYTE{&HFFFF8A3C}=&X11000000
RETURN
> PROCEDURE affiche_picture(picture%,duration&)
  palette_noire
  screen
  CLS
  '
  depacke_image(picture%,old_video%)
  '
  BMOVE vide%,pal_src%,32
  BMOVE picture%+4,pal_dst%,32
  compute_gradient
  '
  FOR p=0 TO 15
    VSYNC
    VSYNC
    VSYNC
    BMOVE gradient%+p*32,&HFFFF8240,32
  NEXT p
  PAUSE duration&
  FOR p=15 TO 0 STEP -1
    BMOVE gradient%+p*32,&HFFFF8240,32
    VSYNC
    VSYNC
    VSYNC
  NEXT p
  '
  palette_noire
  screen
  CLS
RETURN
'
'   Calcul de d‚grad‚ sur 16 palettes (STE)
'
> PROCEDURE compute_gradient
  FOR couleur=0 TO 15
    src_color=CARD{pal_src%+couleur*2}
    src_r=@to_stf((SHR(src_color,8) AND &X1111))
    src_v=@to_stf((SHR(src_color,4) AND &X1111))
    src_b=@to_stf((src_color AND &X1111))
    '
    dst_color=CARD{pal_dst%+couleur*2}
    dst_r=@to_stf((SHR(dst_color,8) AND &X1111))
    dst_v=@to_stf((SHR(dst_color,4) AND &X1111))
    dst_b=@to_stf((dst_color AND &X1111))
    '
    inc_r=(dst_r-src_r)/15
    inc_v=(dst_v-src_v)/15
    inc_b=(dst_b-src_b)/15
    '
    FOR i=0 TO 15
      cr=@to_ste(src_r+inc_r*i)
      cv=@to_ste(src_v+inc_v*i)
      cb=@to_ste(src_b+inc_b*i)
      CARD{gradient%+couleur*2+i*32}=(cr*256)+(cv*16)+cb
    NEXT i
  NEXT couleur
RETURN
> PROCEDURE manage_fade
  ~XBIOS(6,L:gradient%+fade*32)
  IF in=0
    IF fade<15
      fade=fade+1
    ELSE
      in=1
    ENDIF
  ELSE IF in=2
    IF fade>0
      fade=fade-1
    ELSE
      in=3
    ENDIF
  ENDIF
RETURN
> FUNCTION to_stf(var)
var=var AND &X1111
IF BTST(var,3)=-1
  var=SHL(var,1)
  var=BSET(var,0)
ELSE
  var=SHL(var,1)
  var=BCLR(var,0)
ENDIF
var=var AND &X1111
RETURN var
ENDFUNC
> FUNCTION to_ste(var)
var=var AND &X1111
IF BTST(var,0)=-1
var=SHR(var,1)
var=BSET(var,3)
ELSE
var=SHR(var,1)
var=BCLR(var,3)
ENDIF
var=var AND &X1111
RETURN var
ENDFUNC
'
' Depacking of Crackart Picture
'
> PROCEDURE depacke_image(source%,dest%)
~C:ca_unpack%(L:source%+36,L:dest%)
' ~XBIOS(6,L:source%+4)
'  +0 'CA'
'  +2 Flag d‚pack‚/non d‚pack‚
'  +3 R‚solution
'  +4 palette
' +36 image
RETURN
'
'
' Le scroll rebondissant
'
'
> PROCEDURE scrolle(texte$)
vide_buffer
max_x=MUL(LEN(texte$),8)
palette_noire
screen
CLS
buffer%=MALLOC(MUL(160,32))
nettoie(buffer%,MUL(160,32))
FOR i|=0 TO 16
PRINT AT(1,1);"b"+CHR$(SUCC(i|))+"q";texte$
BMOVE ADD(old_video%,MUL(160,DIV(i|,2))),ADD(buffer%,MUL(160,ADD(i|,8))),160
NEXT i|
CLS
a=0
degrade%=V:degrade$
FOR x&=319 DOWNTO 0
VSYNC
y&=SUB(160,ABS(160*COSQ(a)))
BMOVE ADD(degrade%,ADD(y&,y&)),&HFFFF8242,30
RC_COPY buffer%,0,0,SUB(319,x&),32 TO old_video%,x&,y&
INC a
k$=INKEY$
EXIT IF k$<>""
NEXT x&
IF k$=""
FOR x&=0 TO max_x
  VSYNC
  y&=SUB(160,ABS(160*COSQ(a)))
  BMOVE ADD(degrade%,ADD(y&,y&)),&HFFFF8242,30
  RC_COPY buffer%,x&,0,SUB(319,x&),32 TO old_video%,0,y&
  INC a
  k$=INKEY$
  EXIT IF k$<>""
NEXT x&
ENDIF
palette_noire
CLS
~MFREE(buffer%)
vide_buffer
RETURN
'
'
' Les ‚toiles
'
'
PROCEDURE affiche_etoiles(duration&)
palette_noire
screen
CLS
'
'
'               Fonds ‚toil‚, niŠme tentative
'
'
'                     ½ 1992 Dbug II
'
'
'             5 ‚toiles au maximum en interpr‚t‚
'              Jusqu'… 70 ‚toiles en compil‚ !
'
'
nbr&=69
OPTION BASE 0
DIM x%(nbr&),y%(nbr&),c%(nbr&),ix%(nbr&),iy%(nbr&),ic%(nbr&)
DIM dix%(nbr&*2),diy%(nbr&*2),dic%(nbr&*2)
DIM adr1%(nbr&),adr2%(nbr&)
DIM l%(127),w&(127)
'
PRINT "qb"
PRINT
PRINT
PRINT
PRINT "              Credits:"
PRINT
PRINT "        Code & Graphics: Dbug"
PRINT "        Music: Tomchi::Noextra"
PRINT
PRINT
PRINT
PRINT "            Greetings to:"
PRINT
PRINT "  #atari.fr, #atariscne, #oric, #c-64"
PRINT "  #boozoholics, #scene.no, Pouet.net "
PRINT "  Nectarine, and anyone who enjoy demos"
PRINT "  Either by watching or creating them"
PRINT
PRINT
PRINT
'
'
'
RESTORE palette_etoiles
FOR i|=0 TO 7
READ c$
SDPOKE ADD(&HFFFF8240,MUL(i|,2)),VAL("$"+c$)
NEXT i|
'
' Motifs binaires pour l'affichage des ‚toiles
'
RESTORE bits
FOR i|=0 TO 7
READ p1,p2,p3
FOR x|=0 TO 15
  num|=i|*16+x|
  l%(num|)=ADD(SWAP(SHL(p1,x|)),SHL(p2,x|))
  a%=SHL(p3,x|)
  IF a%=>0 AND a%<=32767
    w&(num|)=a%
  ELSE
    w&(num|)=-a%
  ENDIF
NEXT x|
NEXT i|
'
' Cr‚ation des valeur de d‚part pour NBR&*2 ‚toiles
'
FOR i&=1 TO nbr&*2
tp&=ADD(65,RAND(60))
dix%(i&)=(SUB(RAND(320),160)/tp&)*65536
diy%(i&)=(SUB(RAND(200),100)/tp&)*65536
dic%(i&)=ABS(8/tp&)*65536
NEXT i&
'
' Initialisation des ‚toiles
'
FOR i&=1 TO nbr&
x%(i&)=&HA00000
y%(i&)=&H640000
adr1%(i&)=old_video%
adr2%(i&)=old_video%
ix%(i&)=dix%(i&)
iy%(i&)=diy%(i&)
c%(i&)=&H10000
ic%(i&)=dic%(i&)
NEXT i&
'
installe_double_ecran
BMOVE old_video%,e1%,32000
BMOVE old_video%,e2%,32000
'
'
' Apparition du texte a l'‚cran
'
'
RESTORE fondu_etoiles_in
DO
READ c
EXIT IF c=-1
c$=STRING$(8,MKI$(c))
VSYNC
VSYNC
VSYNC
BMOVE V:c$,&HFFFF8250,16
LOOP
'
REPEAT
FOR i&=1 TO nbr&
  LONG{adr2%(i&)}=FALSE
  CARD{ADD(adr2%(i&),4)}=FALSE
NEXT i&
FOR i&=1 TO nbr&
  adr2%(i&)=adr1%(i&)
  IF c%(i&)>&H70000
    adr1%(i&)=null%
    x%(i&)=&HA00000
    y%(i&)=&H640000
    c%(i&)=FALSE
    tp&=ADD(65,RAND(60))
    ix%(i&)=DIV(SHL(SUB(RAND(320),160),16),tp&)
    iy%(i&)=DIV(SHL(SUB(RAND(200),100),16),tp&)
    ic%(i&)=DIV(524288,tp&)
  ELSE
    xx&=SHR(x%(i&),16)
    adr1%(i&)=ADD(ADD(e2%,tx&(xx&)),ty&(SHR(y%(i&),16)))
    a%=adr1%(i&)
    num&=ADD(SHL(SHR(c%(i&),16),4),tb&(xx&))
    LONG{a%}=LONG{a%} OR l%(num&)
    CARD{ADD(a%,4)}=CARD{ADD(a%,4)} OR w&(num&)
    ADD x%(i&),ix%(i&)
    ADD y%(i&),iy%(i&)
    ADD c%(i&),ic%(i&)
  ENDIF
NEXT i&
'
~XBIOS(5,L:e1%,L:e2%,TRUE)
SWAP e1%,e2%
~XBIOS(37)
DEC duration&
UNTIL BIOS(1,2) OR duration&=0
'
'
' Disparition du texte a l'‚cran
'
'
screen
RESTORE fondu_etoiles_out
DO
READ c
EXIT IF c=-1
c$=STRING$(8,MKI$(c))
VSYNC
VSYNC
VSYNC
BMOVE V:c$,&HFFFF8250,16
LOOP
'
'
ERASE x%(),y%(),c%(),ix%(),iy%(),ic%(),dix%(),diy%(),dic%(),adr1%(),adr2%()
ERASE l%(),w&(),ty&(),tx&(),tb&()
'
libere_double_ecran
'
palette_noire
screen
CLS
RETURN
'
'
' Le cube en 3d
'
'
> PROCEDURE affiche_cube(duration&)
palette_noire
screen
CLS
'
'
'                     Cube 3D en GFA...
'
'       ½ 1991/92 Dbug II pour le Kromix-Multipart screen
'
'
'
OPTION BASE 1
DIM x&(8),y&(8)
DIM p1|(12),p2|(12)
installe_double_ecran
'
m$=""
m$=m$+"b1"
m$=m$+"pHi, here is Dbug on keyboard.q"+CHR$(10)+CHR$(13)
m$=m$+CHR$(10)+CHR$(13)
m$=m$+"This demo was started in 1991 while we"+CHR$(10)+CHR$(13)
m$=m$+"were trying to finish the Phaleon demo"+CHR$(10)+CHR$(13)
m$=m$+""+CHR$(10)+CHR$(13)
m$=m$+"I wanted to do a one man demo, with all"+CHR$(10)+CHR$(13)
m$=m$+"code, graphics and music by me. The sad"+CHR$(10)+CHR$(13)
m$=m$+"truth is that I suck at music :) (This"+CHR$(10)+CHR$(13)
m$=m$+"explains why the music was not written"+CHR$(10)+CHR$(13)
m$=m$+"by me !)"+CHR$(10)+CHR$(13)
m$=m$+""+CHR$(10)+CHR$(13)
m$=m$+"Since I did not have the time to finish"+CHR$(10)+CHR$(13)
m$=m$+"this demo properly, Chromix from Cat"+CHR$(10)+CHR$(13)
m$=m$+"Development offered to use the effects"+CHR$(10)+CHR$(13)
m$=m$+"in their own GFA demo, the 'Not So"+CHR$(10)+CHR$(13)
m$=m$+"Ultimate GFA Demo'. For some reason it"+CHR$(10)+CHR$(13)
m$=m$+"was released without my parts, and I"+CHR$(10)+CHR$(13)
m$=m$+"still had no time to finish it."+CHR$(10)+CHR$(13)
m$=m$+""+CHR$(10)+CHR$(13)
m$=m$+"So here we are, 16 years later, I found"+CHR$(10)+CHR$(13)
m$=m$+"bits and parts on some not yet dead"+CHR$(10)+CHR$(13)
m$=m$+"floppies trying to put it all together."+CHR$(10)+CHR$(13)
m$=m$+""+CHR$(10)+CHR$(13)
m$=m$+"Hope you like it :)"+CHR$(10)+CHR$(13)
m_ptr=1
'
'
RESTORE lignes
FOR lignes=1 TO 12
READ p1|(lignes)
READ p2|(lignes)
NEXT lignes
'
'
CLR phi&,the&,rot1&,rot2&,rot3&
'
rho&=60 !300   plus rho est faible, plus la perspective est forte
'
'
' Calcul des coordonnes 3D-2D
'
'
DPOKE &HFF8242,&H70
DPOKE &HFF825E,&H700
'
BMOVE vide%,pal_src%,32
BMOVE &HFF8240,pal_dst%,32
compute_gradient
fade=0
in=0
'
REPEAT
'
manage_fade
'
cxx&=ADD(160,120*COSQ(rot&)*COSQ(rot2&))
cyy&=ADD(100,90*SINQ(rot&)*SINQ(rot2&))
'
CLIP  OFFSET cxx&,cyy&
'
d&=ADD(3000,2000*COSQ(rot3&))
'
st=SINQ(the&)
sp=SINQ(phi&)
ct=COSQ(the&)
cp=COSQ(phi&)
'
ADD rot&,1
ADD rot2&,2
ADD rot3&,3
ADD the&,8
ADD phi&,4
'
cs=ct*sp
ss=st*sp
zz=ct*cp
sc=st*cp
'
'  t
'
zr=(-zz+sc-sp+rho&)/d&
x&(1)=(-st-ct)/zr
y&(1)=-(-cs+ss+cp)/zr
'
zr=(-zz+sc+sp+rho&)/d&
x&(2)=(-st-ct)/zr
y&(2)=-(-cs+ss-cp)/zr
'
zr=(zz+sc+sp+rho&)/d&
x&(3)=(st-ct)/zr
y&(3)=-(cs+ss-cp)/zr
'
zr=(zz+sc-sp+rho&)/d&
x&(4)=(st-ct)/zr
y&(4)=-(cs+ss+cp)/zr
'
zr=(-zz-sc-sp+rho&)/d&
x&(5)=(-st+ct)/zr
y&(5)=-(-cs-ss+cp)/zr
'
zr=(-zz-sc+sp+rho&)/d&
x&(6)=(-st+ct)/zr
y&(6)=-(-cs-ss-cp)/zr
'
zr=(zz-sc+sp+rho&)/d&
x&(7)=(st+ct)/zr
y&(7)=-(cs-ss-cp)/zr
'
zr=(zz-sc-sp+rho&)/d&
x&(8)=(st+ct)/zr
y&(8)=-(cs-ss+cp)/zr
'
LINE x&(p1|(1)),y&(p1|(1)),x&(p2|(1)),y&(p2|(1))
LINE x&(p1|(2)),y&(p1|(2)),x&(p2|(2)),y&(p2|(2))
LINE x&(p1|(3)),y&(p1|(3)),x&(p2|(3)),y&(p2|(3))
LINE x&(p1|(4)),y&(p1|(4)),x&(p2|(4)),y&(p2|(4))
LINE x&(p1|(5)),y&(p1|(5)),x&(p2|(5)),y&(p2|(5))
LINE x&(p1|(6)),y&(p1|(6)),x&(p2|(6)),y&(p2|(6))
LINE x&(p1|(7)),y&(p1|(7)),x&(p2|(7)),y&(p2|(7))
LINE x&(p1|(8)),y&(p1|(8)),x&(p2|(8)),y&(p2|(8))
LINE x&(p1|(9)),y&(p1|(9)),x&(p2|(9)),y&(p2|(9))
LINE x&(p1|(10)),y&(p1|(10)),x&(p2|(10)),y&(p2|(10))
LINE x&(p1|(11)),y&(p1|(11)),x&(p2|(11)),y&(p2|(11))
LINE x&(p1|(12)),y&(p1|(12)),x&(p2|(12)),y&(p2|(12))
'
IF m_ptr<LEN(m$)
  ~XBIOS(5,L:old_video%,L:e2%,TRUE)
  PRINT MID$(m$,m_ptr,1);
  INC m_ptr
  IF m_ptr<LEN(m$)
    PRINT MID$(m$,m_ptr,1);
    INC m_ptr
  ENDIF
ELSE
  DEC duration&
  IF duration&=0
    in=2
  ENDIF
ENDIF
~XBIOS(5,L:e1%,L:e2%,TRUE)
BMOVE old_video%,e1%,32000
VSYNC
'
SWAP e1%,e2%
UNTIL BIOS(1,2) OR in=3
'
CLIP  OFFSET 0,0
ERASE x&(),y&(),p1|(),p2|()
libere_double_ecran
'
palette_noire
screen
CLS
RETURN
'
'
' L'affichage du petit ®serpent¯ form‚ de points
'
'
> PROCEDURE affiche_dots(duration&)
palette_noire
screen
CLS
'
'
' On cr‚e la palette de base
'
'
OPTION BASE 0
DIM c(15),pal$(15),ox&(15),oy&(15)
'
RESTORE couleur_dots
FOR i=0 TO 15
READ a$
c(i)=256*VAL("$"+a$)
NEXT i
'
' Puis on pr‚pare le cycling
'
FOR i=0 TO 14
pal$(i)=MKI$(0)
FOR j=1 TO 15
  pal$(i)=pal$(i)+MKI$(c(j))
NEXT j
pal$(i)=pal$(i)+STRING$(2,0)
'
' On cycle
'
a=c(1)
FOR k=1 TO 14
  c(k)=c(k+1)
NEXT k
c(15)=a
NEXT i
'
lx&=140
ly&=90
cx&=160
cy&=100
'
'
'
ia=0.05
ib=0.05
ic=0.05
id=0.03
ie=0.04
couleur|=1
REPEAT
x&=lx&*COS(a)*COS(b)
y&=ly&*SIN(b)*SIN(d)
ADD a,ia*ACOS(ie)*ATN(ie)
ADD b,ib
ADD c,ic
ADD d,id
ADD e,ie
'
put_pixel(cx&+x&,cy&+y&,couleur|)
'
put_pixel(cx&+x&-2,cy&+y&-2,couleur|)
put_pixel(cx&+x&-5,cy&+y&-5,couleur|)
put_pixel(cx&+x&-9,cy&+y&-9,couleur|)
put_pixel(cx&+x&+2,cy&+y&+2,couleur|)
put_pixel(cx&+x&+5,cy&+y&+5,couleur|)
put_pixel(cx&+x&+9,cy&+y&+9,couleur|)
'
put_pixel(cx&-x&-2,cy&-y&-2,couleur|)
put_pixel(cx&-x&-5,cy&-y&-5,couleur|)
put_pixel(cx&-x&-9,cy&-y&-9,couleur|)
put_pixel(cx&-x&+2,cy&-y&+2,couleur|)
put_pixel(cx&-x&+5,cy&-y&+5,couleur|)
put_pixel(cx&-x&+9,cy&-y&+9,couleur|)
'
INC couleur|
IF couleur|=16
  couleur|=1
ENDIF
~XBIOS(6,L:V:pal$(16-couleur|))
VSYNC
xo&=ox&(1)
yo&=oy&(1)
'
put_pixel(cx&+xo&,cy&+yo&,0)
'
put_pixel(cx&+xo&-2,cy&+yo&-2,0)
put_pixel(cx&+xo&-5,cy&+yo&-5,0)
put_pixel(cx&+xo&-9,cy&+yo&-9,0)
put_pixel(cx&+xo&+2,cy&+yo&+2,0)
put_pixel(cx&+xo&+5,cy&+yo&+5,0)
put_pixel(cx&+xo&+9,cy&+yo&+9,0)
'
put_pixel(cx&-xo&-2,cy&-yo&-2,0)
put_pixel(cx&-xo&-5,cy&-yo&-5,0)
put_pixel(cx&-xo&-9,cy&-yo&-9,0)
put_pixel(cx&-xo&+2,cy&-yo&+2,0)
put_pixel(cx&-xo&+5,cy&-yo&+5,0)
put_pixel(cx&-xo&+9,cy&-yo&+9,0)
'
DELETE ox&(1)
DELETE oy&(1)
ox&(15)=x&
oy&(15)=y&
DEC duration&
UNTIL BIOS(1,2) OR duration&=0
'
palette_noire
CLS
'
'
ERASE c(),pal$(),ox&(),oy&()
'
palette_noire
screen
CLS
RETURN
> PROCEDURE put_pixel(px&,py&,co&)
'  PRINT px&,py&,co&
' TRON
' PSET px&,py&,co|
adr%=ADD(old_video%,ADD(ty&(py&),tx&(px&)))
bit%=SHL(1,tb&(px&))
ibit%=NOT (bit%)
IF co& AND 1
CARD{adr%}=OR(CARD{adr%},bit%)
ELSE
CARD{adr%}=AND(CARD{adr%},ibit%)
ENDIF
adr%=ADD(adr%,2)
IF co& AND 2
CARD{adr%}=OR(CARD{adr%},bit%)
ELSE
CARD{adr%}=AND(CARD{adr%},ibit%)
ENDIF
adr%=ADD(adr%,2)
IF co& AND 4
CARD{adr%}=OR(CARD{adr%},bit%)
ELSE
CARD{adr%}=AND(CARD{adr%},ibit%)
ENDIF
adr%=ADD(adr%,2)
IF co& AND 8
CARD{adr%}=OR(CARD{adr%},bit%)
ELSE
CARD{adr%}=AND(CARD{adr%},ibit%)
ENDIF
' REPEAT
' k$=INKEY$
' UNTIL k$<>""
' IF k$="q"
' EDIT
' ENDIF
'  TROFF
RETURN
'
'
'  Partie avec les boules en moving background, et le scroll blitter
'
'
> PROCEDURE affiche_moving_back
' palette_noire
screen
CLS
'
'
'     STE ONLY..... (hardscroll + blitter for the text)
'
'
texte$=SPACE$(40)
texte$=texte$+"Yeah, could have been more impressive but I sincerely had no time !!!    Promised !!! "
texte$=texte$+SPACE$(40)
'
'
' Taille du buffer:
' 15x 8xl
'
l&=LEN(texte$)
IF (l& MOD 2)<>0
INC l&
texte$=texte$+" "
ENDIF
taille%=15*24*l&
'
buffer%=MALLOC(128000+taille&)
message%=buffer%+128000
nettoie(buffer%,128000+taille&)
'
FOR i&=0 TO l&-1
PRINT AT(1,1);MID$(texte$,SUCC(i&),1)
FOR y|=0 TO 7
  BYTE{ADD(message%,ADD(i&,MUL(y|*3,l&)))}=BYTE{ADD(old_video%,MUL(y|,160))}
  BYTE{ADD(message%,ADD(i&,MUL(y|*3+1,l&)))}=BYTE{ADD(old_video%,MUL(y|,160))}
  BYTE{ADD(message%,ADD(i&,MUL(y|*3+2,l&)))}=BYTE{ADD(old_video%,MUL(y|,160))}
NEXT y|
NEXT i&
SUB l&,42
max_pos&=(l&+2)*8
'
'
' Recopie la boule dans le buffer
'
'
adr%=ADD(ball%,32)
FOR y|=0 TO 9
FOR x|=0 TO 12
  FOR h|=0 TO 34
    BMOVE ADD(adr%,MUL(h|,24)),ADD(buffer%,ADD(MUL((ADD(MUL(y|,40),h|)),320),MUL(x|,24))),24
  NEXT h|
NEXT x|
NEXT y|
'
'
x&=280
y&=100
a%=ADD(buffer%,ADD(MUL(DIV(x&,16),8),MUL(y&,320)))
VSYNC
'
' Set the palette
'
' BMOVE ball%,&HFF8240,32
CARD{ball%+2*8}=&H37
'
BMOVE vide%,pal_src%,32
BMOVE ball%,pal_dst%,32
compute_gradient
fade=0
in=0
'
' Main loop
'
REPEAT
manage_fade
'
xb&=x&
yb&=y&
ab%=ADD(a%,MUL(320,20*COSQ(b)))
ADD b,2
'
x&=ADD(160,160*COSQ(a))
y&=ADD(100,100*SINQ(a))
'
INC a
a%=ADD(buffer%,ADD(MUL(DIV(x&,16),8),MUL(y&,320)))
p|=x& AND 15
IF p|=0
  l|=80
ELSE
  l|=76
ENDIF
a3|=a% AND 255
a2|=SHR(a%,8) AND 255
a1|=SHR(a%,16) AND 255
'
source%=ADD(message%,SHL(DIV(pos_x&,16),1))
decal&=ADD((SUB(15,(pos_x& AND 15))),(xb& AND 15))
IF decal&>15
  decal&=decal& AND 15
  SUB source%,2
ENDIF
ADD pos_x&,2
IF pos_x&>max_pos&
  CLR pos_x&
  in=2
  ' duree_moving&=1
ENDIF
'
blitter(3)
'
'
' Attente du d‚but de l'‚cran
'
'
REPEAT
  sync|=BYTE{&HFFFF8209}
UNTIL BYTE{&HFFFF8209}<>sync|
'
'
' Attente de la fin de l'‚cran
'
'
REPEAT
  REPEAT
    sync%=ADD(ADD(SHL(BYTE{&HFFFF8205},16),SHL(BYTE{&HFFFF8207},8)),BYTE{&HFFFF8209})
  UNTIL sync%=ADD(ADD(SHL(BYTE{&HFFFF8205},16),SHL(BYTE{&HFFFF8207},8)),BYTE{&HFFFF8209})
UNTIL sync%=ADD(ADD(SHL(BYTE{&HFFFF8205},16),SHL(BYTE{&HFFFF8207},8)),BYTE{&HFFFF8209})
'
' blitter_palette
'
blitter(0)
'
'    CARD{&HFF8240}=&H700
BYTE{&HFF820F}=l|
BYTE{&HFF8201}=a1|
BYTE{&HFF8203}=a2|
BYTE{&HFF8265}=p|
BYTE{&HFF820D}=a3|
'   CARD{&HFF8240}=&H0
VSYNC
'
DEC duree_moving&
UNTIL BIOS(1,2) OR duree_moving&=0 OR in=3
'
palette_noire
CLS
~MFREE(buffer%)
BYTE{&HFF8265}=0
BYTE{&HFF820F}=0
RETURN
> PROCEDURE blitter(mode|)
'  CARD{&HFF8240}=&H70
CARD{&HFF8A20}=2                  ! Source horizontal increment
CARD{&HFF8A22}=l&                 ! Source vertical increment
LONG{&HFF8A24}=source%            ! Source adress
'
CARD{&HFF8A2E}=8                  ! Destination horizontal increment
CARD{&HFF8A30}=160-8              ! Destination vertical vertical
LONG{&HFF8A32}=ab%-2+320*80       ! Destination adress
'
CARD{&HFF8A36}=22                 ! Width (in words)
CARD{&HFF8A38}=24                 ! Height (in lines)
'
BYTE{&HFF8A3D}=decal&
'
BYTE{&HFF8A3A}=2                  ! Source only  !2
BYTE{&HFF8A3B}=mode|              ! Graphmode    !3
BYTE{&HFF8A3C}=&X11000000
' CARD{&HFF8240}=&H0
RETURN
'
'
'  Et un plan qui tourne dans l'immensit‚ de l'espace...
'
'
> PROCEDURE affiche_lighted_plane(duration&)
palette_noire
screen
CLS
'
OPTION BASE 0
DIM teinte&(16)
DIM x(3),y(3)
DIM xo(3),yo(3),zo(3)   ! coordonn‚es 3d d'origine par face
'
RESTORE teintes
FOR i=0 TO 15
READ a$
teinte&(i)=VAL("$"+a$)
NEXT i
'
installe_double_ecran
'
'
'
phi=0 !270
the=0 !270
rho=200 !300   plus rho est faible, plus la perspective est forte
d=350
'
'
' Charge les coordon‚es
'
'
RESTORE debut_data
FOR i=0 TO 3
READ xo(i),yo(i),zo(i)
NEXT i
'
'
' Calcul des coordonnes 3D-2D
'
'
DEFFILL 1
REPEAT
' PRINT the,phi
st=SIN(RAD(the))
sp=SIN(RAD(phi))
tc=COS(RAD(the))
cp=COS(RAD(phi))
'
ADD the,5
ADD phi,2
'
cs=tc*sp
ss=st*sp
zz=tc*cp
sc=st*cp
'
CLS
'
FOR i=0 TO 3
  x1=xo(i)
  y1=yo(i)
  z1=zo(i)
  '
  xr=-x1*st+y1*tc
  yr=-x1*cs-y1*ss+z1*cp
  zr=-x1*zz-y1*sc-z1*sp+rho
  x(i)=ADD(160,(d*xr)/zr)
  y(i)=SUB(100,(d*yr)/zr)
NEXT i
POLYFILL 4,x(),y()
'
IF phi>360
  SUB phi,360
ENDIF
SELECT phi
CASE 0 TO 90
  v=phi*89/90
CASE 90 TO 180
  v=181-phi
CASE 180 TO 270
  v=phi-181
CASE 270 TO 360
  v=360-phi
ENDSELECT
SETCOLOR 15,teinte&(SUCC(15*(v/90)))
~XBIOS(5,L:e1%,L:e2%,TRUE)
VSYNC
SWAP e1%,e2%
DEC duration&
UNTIL BIOS(1,2) OR duration&=0
palette_noire
screen
CLS
'
ERASE teinte&(),x(),y(),xo(),yo(),zo()
libere_double_ecran
RETURN
'
'
' Tous les datas pour toutes les parties...
'
'
' Plan
'
teintes:
DATA 0,8,1,9,2,a,3,b,4,c,5,d,6,e,7,f
'
debut_data:
DATA -50,-50,0,50,-50,0,50,50,0,-50,50,0
'
' Points
'
couleur_dots:
DATA 0,8,1,9,2,a,3,b,4,c,5,d,6,e,7,f
'
' Scroll raster
'
degrade_scrolle:
DATA $700,$710,$720,$730,$740,$750,$760,$770
DATA $771,$772,$773,$774,$775,$776,$777
DATA $677,$577,$477,$377,$277,$177,$077
DATA $067,$057,$047,$037,$027,$017,$007
DATA $107,$207,$307,$407,$507,$607,$707
DATA $706,$705,$704,$703,$702,$701
'
' Etoiles
'
palette_etoiles:
DATA 000,111,222,333,444,555,666,777
DATA 300,300,300,300,300,300,300,300
'
bits:
DATA 0,0,0
DATA 1,0,0
DATA 0,1,0
DATA 1,1,0
DATA 0,0,1
DATA 1,0,1
DATA 0,1,1
DATA 1,1,1
'
fondu_etoiles_in:
DATA $000,$800,$100,$900,$200,$a00,$300,-1
fondu_etoiles_out:
DATA $300,$a00,$200,$900,$100,$800,$000,-1
'
' Cube 3D
'                  | +5 y)
'                  |
'                  |
'              6-------7
'             /|      /|
'            5-------8 |
'            | |     | |
'            | 2-----|-3
' -5 (x)-----|/      |/ --------------------- +5 (x)
'            1---- --4
'               /
'              /
'             /
'           +5 (z)
'
lignes:
DATA 1,2
DATA 2,3
DATA 3,4
DATA 4,1
DATA 5,6
DATA 6,7
DATA 7,8
DATA 8,5
DATA 1,5
DATA 2,6
DATA 3,7
DATA 4,8
'
'
'
