<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">

<HTML lang=fr dir=ltr>
	<HEAD>
		<meta name="robots" content="noindex">
		<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
		<title>OSDK - PictConv</title>
		<link href="documentation.css" rel="stylesheet" type="text/css">
	</HEAD>

	<BODY>

<hr>
<A href="documentation.htm"><img src="arrow_back.gif"></A>
<img src="pics/osdk_logo_small.png">
<hr>

		<h1>PictConv</h1>

<p id=chapter>Description</p>

<p>PictConv is a tool that can be used to convert pictures created with a standard
PC paint program (PaintShopPro, PhotoShop, ...), in a format displayable on the Oric.
</p>


<p id=chapter>Utilisation</p>

<p>To convert a picture:
</p>
<pre>
	%OSDK%\bin\PictConv [switches] source_picture destination_file 
</pre>
<p>Supported formats for the source picture is everything that FreeImage supports (BMP, PCX, PNG, TGA and TIFF among other).
</p>


<p id=chapter>Switches</p>
<ul>

<li>The -m switch is used to define what the target machine is:
<p>
<pre>
-m0 => Oric [Default]
-m1 => Atari ST
</pre>
</p>
</li>

<li>The -f switch control the type of picture conversion that will be performed. This is machine dependent:
<p>
<pre>
<b>Oric</b>:
  -f0 => to hires monochrom format [default]
  -f0z => to hires monochrom format (do not set bit 6) *** Not working in this version ***
  -f1 => precolored picture
  -f2 => RVB conversion
  -f3 => Twilight masks
  -f4 => RB conversion
  -f5 => charactermap generator
  -f6 => Sam method (Img2Oric)
  -f7 => AIC encoding
<b>Atari ST</b>:
  -f0 => Single palette format [default]
  -f1 => Multi palette format
</pre>
</p>
</li>

<li>The -o switch defines the final file format:
<p>
<pre>
-o0 => Tape format, including a BASIC loader
-o1 => Tape format, simply the picture
-o2 => RAW format. No header.
-o3[label name] => C source code
-o4[label name] => assembler source code
-o5 => Output a PC picture format
-o6 => 2 bytes (dx,dy) size followed by RAW picture
-o7 => palette followed by picture
-o8[line:step] => BASIC source code
</pre>
For <b>-o3</b> and <b>-o4</b>, if <i>"label name"</i> is not defined, the default <i>"LabelPicture"</i> is used.<br>
For <b>-o8</b> you can specify two values that will be taken respectively as the first line number and the step between lines.
</p>

<p>One very useful feature is the <b>-o5</b> mode which instead of saving to the Oric or Atari format, will save the result of the conversion to a pc format.
This is very practical when experimenting with multi-palette or dithering options, because you do not have to try on the real machine, you can just check the
result directly on your pc.
</p>

<p>When doing Atari conversion, you typically want to use the <b>-o7</b> mode, which will save the palette (or palettes) followed by the bitmap. 
You don't really want to try other formats because they will not work well in this version for the atari conversions (they were made for the Oric and I did not update the code yet.</p>

</li>

<li>The -p switch controls the way palettes are managed:
<p>
<pre>
-p0 => Generate a palette automatically [default]
-p1 => Last line of the picture contains the palette
-p2 => Last pixels of each line of the picture contains the palette
</pre>
</p>

<p>When using <b>-p0</b>, PictConv will automatically perform the palette generation, using the STe enhanced palettes, eventually reducing the color depth if more than 16 colors are used.
If the color conversion is done with the <b>-f0</b> format, one single palette will be generated in the final picture. If the <b>-f1</b> format is used, then one palette will be generated for each scanline.
</p>
<p>If you want to use <b>-p1</b> or <b>-p2</b>, you need to modify your input picture to include palette data. An important point to miss, is that you can use <b>-p1</b> with <b>-f1</b>. 
At first glance it would look like you would use the same single palette repeated for every scanline, which seems to be of dubious interest, but it makes sense when you will learn that the 
palettes you specify do not have to be complete. Only the color indexes defined in the palette will be used in the conversion process, the free indexes will be used by the color reduction routine.</p>

<p>When using <b>-p1</b>, you need to add two scanlines at the bottom of your picture. So if your picture is 320x200, you will have to make it 320x202, the two last lines will be used by PictConv to figure out which colors to use.
(Of course the exported picture will be 320x200). The way it works, is that these two additional lines will contains colors that will be interpreted as either "not set" colors, or "fixed colors". 
The first pixel of the first additional line will be used as "not set" color, the 16 first pixels of the second additional line will be the palette itself. 
Each of these 16 pixels that are of the same color as the "not set" color will be ignored. Others will be interpreted as colors that have to be kept at this particular position in the palette.
That's particularly useful to make sure that your background color is at index 0, and that this particular sprite is using the color 8 of the palette.
</p>
<p>Some examples will make it easier to understand:
<br>
<img SRC="pics/osdk_rasters.png" WIDTH=159 HEIGHT=53 alt="Original logo, 1632 colors">
=>
<img SRC="pics/osdk_atari_f0.png" WIDTH=159 HEIGHT=53 alt="Converted with -m1 -f0">
=>
<img SRC="pics/osdk_atari_p0.png" WIDTH=159 HEIGHT=53 alt="Converted with -m1 -f1 -p0">
<br>
<img SRC="pics/osdk_rasters_p1.png" WIDTH=159 HEIGHT=53 alt="Original logo, 1632 colors, with palette at the bottom">
=>
<img SRC="pics/osdk_atari_p1_multipalette.png" WIDTH=159 HEIGHT=53 alt="Converted with -m1 -f1 -p1">
<br>
<img SRC="pics/osdk_rasters_p2.png" WIDTH=159 HEIGHT=53 alt="Original logo, 1632 colors, with palettes at the right">
=>
<img SRC="pics/osdk_atari_p2_multipalette.png" WIDTH=159 HEIGHT=53 alt="Converted with -m1 -f1 -p2">
</p>
</li>

<li>The -d switch controls the dithering operation:
<p>
<pre>
-d0 => No dithering (0/1)
-d1 => Alternate dithering  (0/0.5/1)
-d2 => Ordered dithering (4x4 matrix, 8 levels)
-d3 => Riemersma dithering (based on hilbert curves)
</pre>
</p>
</li>


<li>The -a switch enable the alpha channel detection:
<pre>
-a0 => no transparency [default]
-a1 => encode alpha as zeroes (Only supported for monochrome and AIC pictures)
</pre>
</li>

<li>The -t switch enables the testing mode:
<pre>
-t0 => Testing disabled
-t1 => Testing enabled
</pre>
</li>

<li>The -n switch defines the number of entries per line when generating text format:
<pre>
-n16 => Output 16 values each line
-n40 => Output 40 values each line
</pre>
</li>
</ul>

<p id=chapter>Some picture samples</p>

<p>
Here are some conversion samples, with the parameters used.
</p>


<center>

<br>
Buffy
<br>
<img SRC="pics/buffy.jpg" WIDTH=240 HEIGHT=200>
<br>
<table cellspacing="5">
<tr>
<th></th>
<th>-f0</th>
<th>-f2</th>
</tr>
<tr>
<th>-d0</th>
<td><img SRC="pics/buffy_0_0.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/buffy_2_0.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d1</th>
<td><img SRC="pics/buffy_0_1.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/buffy_2_1.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d2</th>
<td><img SRC="pics/buffy_0_2.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/buffy_2_2.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d3</th>
<td><img SRC="pics/buffy_0_3.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/buffy_2_3.gif" WIDTH=240 HEIGHT=200></td>
</tr>
</table>
<br>


<br>
Mire
<br>
<img SRC="pics/mire2.gif" WIDTH=240 HEIGHT=200>
<br>
<table cellspacing="5">
<tr>
<th></th>
<th>-f0</th>
<th>-f2</th>
</tr>
<tr>
<th>-d0</th>
<td><img SRC="pics/mire2_0_0.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/mire2_2_0.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d1</th>
<td><img SRC="pics/mire2_0_1.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/mire2_2_1.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d2</th>
<td><img SRC="pics/mire2_0_2.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/mire2_2_2.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d3</th>
<td><img SRC="pics/mire2_0_3.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/mire2_2_3.gif" WIDTH=240 HEIGHT=200></td>
</tr>
</table>
<br>


<br>
Moxica
<br>
<img SRC="pics/moxica1.jpg" WIDTH=240 HEIGHT=200>
<br>
<table cellspacing="5">
<tr>
<th></th>
<th>-f0</th>
<th>-f2</th>
</tr>
<tr>
<th>-d0</th>
<td><img SRC="pics/moxica1_0_0.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/moxica1_2_0.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d1</th>
<td><img SRC="pics/moxica1_0_1.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/moxica1_2_1.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d2</th>
<td><img SRC="pics/moxica1_0_2.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/moxica1_2_2.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d3</th>
<td><img SRC="pics/moxica1_0_3.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/moxica1_2_3.gif" WIDTH=240 HEIGHT=200></td>
</tr>
</table>
<br>


<br>
Lena
<br>
<img SRC="pics/lena.gif" WIDTH=240 HEIGHT=200>
<br>
<table cellspacing="5">
<tr>
<th></th>
<th>-f0</th>
<th>-f2</th>
</tr>
<tr>
<th>-d0</th>
<td><img SRC="pics/lena_0_0.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/lena_2_0.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d1</th>
<td><img SRC="pics/lena_0_1.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/lena_2_1.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d2</th>
<td><img SRC="pics/lena_0_2.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/lena_2_2.gif" WIDTH=240 HEIGHT=200></td>
</tr>
<tr>
<th>-d3</th>
<td><img SRC="pics/lena_0_3.gif" WIDTH=240 HEIGHT=200></td>
<td><img SRC="pics/lena_2_3.gif" WIDTH=240 HEIGHT=200></td>
</tr>
</table>
<br>


</center>





<p id=chapter>Frequently Asked Questions</p>

<ul>
	<li>
		<p>
		<b>In colored mode, free size pictures are not accepted. Why ???</b>
		</p>
		<p>
		Try to imagine how you could scroll horizontaly a picture containing
		attributes changes without having huge color changes. This is not possible.
		Free vertical size is allowed anyway, but it's buggy right now :))
		</p>
	</li>


	<li>
		<p>
		<b>In colored mode, the converted picture contains some lines that are black and white.</b>
		</p>
		<p>
		These scanlines cannot be converted. A colored pictures should use Oric constraints, 
		be in at most 8 colors, no more than 2 colors per 6 pixel bloc, and so on...
		</p>
	</li>

	<li>
		<p>
		<b>In colored mode, PictConv decided to use strange paper and ink changes.</b>
		</p>
		<p>
		Actually PictConv simply tries all the possible combinations of paper, ink, video inverse 
		changes that could work to convert the picture. When it find one working combination, 
		it moves to the next scanline.
		</p>
	</li>
</ul>


<p id=chapter>History</p>

<p>Here is the list of all releases with a short description of things that changed:
</p>


<p id=dateentry>Version 0.22</p>
- Fixed the -f5 (charmap generator) to work correctly without crashing.
- Inverted -o0 and -o1 in the description of commands (issue #3)

<p id=dateentry>Version 0.21</p>
- Added support for 32bit picture, to handle things like masking/opacity in the picture formats
- The -a1 mode will generate bytes with null value for blocks of 6 pixels with transparent alpha values (only active in monochrome or AIC conversion modes)
- Added the -f7 conversion mode for Oric pictures using the AIC coloring method.

<p id=dateentry>Version 0.20</p>
- The -f6 mode can now be used for pictures that are taller than the screen<br>
- Fixed the percentage calculation so it actually goes from 0 to 100 even when pictures are not 200 pixel tall.<br>

<p id=dateentry>Version 0.19</p>
- Fixed a buffer overflow in the -f6 conversion mode happening when images are not 240x200<br>
- Changed the depth mode from 3 to 2 to speed-up the conversion<br>

<p id=dateentry>Version 0.18</p>
- Added the -f6 conversion mode for Oric pictures. This is the method used in Img2Oric/LibPipi and generally gives much better results when converting - albeit much much slower than other methods.<br>

<p id=dateentry>Version 0.17</p>
- Fixed a the update code, was failing if the target file did not exist (facepalm)<br>

<p id=dateentry>Version 0.16</p>
- New option to skip the conversion if the target file is more recent than the source file (-u)<br>
- New option to enable/disable information about what happens (-v)<br>

<p id=dateentry>Version 0.13</p>
 - It is now possible to lock some colors index to some particular values.<br>

<p id=dateentry>Version 0.12</p>
 - Lot of modifications in the codebase to handle more cleanly the various types of machines.<br>
 - The Atari ST now can generate multi-palette pictures.<br>
 - Color reduction is now done by PictConv, no need to reduce to 16 colors manually.<br>

<p id=dateentry>Version 0.11</p>
 - Added the -o7 format to generate BASIC source codes.<br>
 - Removed the constraints in the -f1 mode, pictures just need to be multiple of 6 in width, and no more than 240 pixel wide.

<p id=dateentry>Version 0.10</p>
 - If there is something specified after -o3 or -o4 modes, it's used as a label name to use when generating source code data.<br>
 - If there is a 'z' specified after -f0 mode (monochrome conversion), it means that bit 6 should not be set in converted bytes<br>
 - Added -n switch to set the number of values per line (stolen from Bin2Txt !)<br>

<p id=dateentry>Version 0.9</p>
 - New option for generating 'masks' in bits 6 and 7 based on what is presents in bits 0/1/2 and 3/4/5.<br>
   (Twilighte's request for his new games)<br>
 - Added a way to convert pictures to something that can be used on an Atari ST.<br>
   (needed that for my entry to the 20 years anniversary Atari ST compo)<br>

<p id=dateentry>Version 0.8</p>
 - Added "test" mode that's usefull to debug a picture in colored mode
 
<p id=dateentry>Version 0.7</p>
 - Removed the timer check in the colored conversion mode. It was producing bad 
   conversion on slow computers. Anyway, if you are unlucky, a conversion could
   now take hours to perform if the tool has to perform ALL possible combinations.

<p id=dateentry>Version 0.6</p>
 - A message is given if the picture is not found or invalid.<br>
 - Colored mode had some bugs: all now corrected ???<br>

<p id=dateentry>Version 0.5</p>
 - Debugged the -o6 format.<br>
 - Debugged the -f1 mode.<br>

<p id=dateentry>Version 0.4</p>
 - Allow free size pictures (bigger than screen size except for colored mode)<br>

<p id=dateentry>Version 0.3</p>
 - Riemersman dithering implemented <br>

<p id=dateentry>Version 0.2</p>
 - New version with basic dithering<br>

<p id=dateentry>Version 0.1</p>
 - First beta release<br>




<hr>
<A href="documentation.htm"><img src="arrow_back.gif"></A>
<img src="pics/osdk_logo_small.png">
<hr>

	</BODY>
</HTML>


