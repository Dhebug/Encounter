<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">

<HTML lang=fr dir=ltr>
	<HEAD>
		<meta name="robots" content="noindex">
		<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
		<title>OSDK - Bas2Tap</title>
		<link href="documentation.css" rel="stylesheet" type="text/css">
	</HEAD>

	<BODY>

<hr>
<A href="documentation.htm"><img src="arrow_back.gif"></A>
<img src="pics/osdk_logo_small.png">
<hr>

		<h1>Bas2Tap</h1>

<p id=chapter>Description</p>

<p>This program can be used to convert an Oric BASIC program to and from TAPE binary format.
Technicaly this means that instead of using the Oric BASIC line based text editor, you can
edit an ORIC BASIC program entirely in a comfortable text editor, and then convert it automaticaly
to a tape file format that can later be loaded on the emulator -or played on a real Oric-.
</p>

<p id=chapter>Utilisation</p>

<p>To transform a binary file as a texte file:
</p>
<pre>
	%OSDK%\bin\Bas2Tap [switches] source_file destination_file
</pre>


<p id=chapter>Switches</p>

<ul>
	<li>
		<p>With the -t2b switch Bas2Tap converts a binary encoded tape to text format:
		</p>
		<pre>
		-t2b tapefile textfile 
		</pre>
	</li>

	<li>
		<p>The -b2t[0|1] switch convert a text file to binary encoded tape format
		</p>
		<pre>
		-b2t0 textfile tapefile => Generate a TAPE file that do not auto run after the loading is finished (you have to manualy use the RUN command)
		-b2t1 textfile tapefile => Generate a TAPE file that auto run after the loading is finished
		</pre>
	</li>

	<li>
		<p>The -color[0|1] switch set if the REM and ' statements should be colorized or not
		</p>
	</li>
</ul>

<p id=chapter>Extended BASIC</p>

<p>By default Bas2Tap will expect the source program to contain line numbers, you can enable the extended BASIC features using one of the commands starting by the # symbol.
    Here is a list of what you can use:
</p>

<ul>
	<li>#labels
		<p>This command enables the mode labels with automatic generation of line numbers. You can mix and match sections of code with or without line numbers as long as the resulting merge content stays logical with line numbers increasing.
		</p>
                <p>Labels have to start on the column zero, and can be followed by one or two colon-separated values, one giving the new reference line number and the other being the increment. The ยง symbol can be used to get the current line number.
                </p>
		<pre>
                my_label
                   PRINT"The current line number is ";ยง
		anotherLabel:+5
                   PRINT"Now lines are increasing by multiple of 5"
                farLabel:32000
                   PRINT"We are now at line 32000"
                   GOTO my_label
		</pre>
	</li>

	<li>#optimize
		<p>This parameter removes all white spaces and comments to the exported binary file. This makes debugging much harder, but it also can reduce a typical program size by a few kilobytes easily.
		</p>
	</li>

	<li>#define name value
		<p>Just defines a symbol and gives it a value. Please note that the name can't contain any Oric BASIC instruction name, so things like "CONTAINER" (contains CONT) or "DEEPPIT" (contains PI) are not allowed (but "Container" and "DeepPit" should be fine)
		</p>
		<pre>
                #define Cross 1
                #define Circle 2
                   A=Cross:B=Circle
		</pre>
	</li>

	<li>~
		<p>The tilde character must be followed by a letter in either upper or lower case. Upper case ones will be exported as the equivalent of CHR$(27)+letter (so can be used to insert attributes, color changes, etc...) while lower case ones will be exported as one byte control code, such as carriage return and cursor down.
		</p>

		<pre>
                PRINT@15,11;"~N~CLOADING"
                PRINT@15,12;"~N~ALOADING"
                I$=I$+"a plastic bag~m~j"
		</pre>
	</li>
</ul>


<p id=chapter>History</p>

<p>Here is the list of all releases with a short description of things that changed:
</p>

<p id=dateentry>Version 2.2</p>
- The error message for unrecognized preprocessor directive now displays the actual line content to facilitate debugging
- Added an #import directive to allow the loading of symbols generated by XA
- CALL and POKE instructions can now also use symbolic names

<p id=dateentry>Version 2.1</p>
- The DATA instruction should not be usable with defines
- Correctly filtered out comments at the end of a #define...

<p id=dateentry>Version 2.0</p>
- Added support for labels and auto-numbering (use ยง as a keyword to expand to the current line number)<br>
- Added support for escape sequences to directly integrate carriage return or attribute changes inside strings without having to use CHR$ (use the character ~ as the ESCape prefix)<br>
- Added a basic support for #defines <br>
- The -optimize option now also filters out as much whitespace as possible<br>

<p id=dateentry>Version 1.3</p>
- Added a -optimize option (used to disable things like comments)<br>


<p id=dateentry>Version 1.2</p>
- Support for pure comments without line numbers (accepts lines starting by ' or ; or //)<br>

<p id=dateentry>Version 1.1</p>
- Added filtering of strings before parsing, to remove superfluous spaces, tabs and other carriage returns before starting the syntax conversion pass<br>

<p id=dateentry>Version 1.0</p>
- Added the handling of token codes over 246 to allow the dump of corrupted files, these will have a CORRUPTED_ERROR_CODE_nnn message at the location of the corrupted data (in this particular case it was the game ENCOUNTER from Severn Software at line 11150 having a "NEXT WITHOUT FOR" message displayed
- Fixed the program so it can output to a file instead of stdout

<p id=dateentry>Version 0.2</p>
 - Fixed a bug causing loading problems<br>
 
<p id=dateentry>Version 0.1</p>
 - Created Bas2Tap by joining and extending two of Fabrice Frances programs: Bas2Txt and Txt2Bas<br>
 - Added error messages when missing line numbers are found<br>
 - Added support for the #file preprocessor directive making it possible to link together more than one BASIC source code and get the right error messages<br>


<hr>
<A href="documentation.htm"><img src="arrow_back.gif"></A>
<img src="pics/osdk_logo_small.png">
<hr>

	</BODY>
</HTML>


