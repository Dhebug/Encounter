Index: src/sdl.c
===================================================================
--- src/sdl.c	(revision 5)
+++ src/sdl.c	(working copy)
@@ -26,6 +26,7 @@
 #include <limits.h>
 #include <stdarg.h>
 #include <stddef.h>
+#include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -37,6 +38,7 @@
 #include "caloric.h"
 #include "hosttraps.h"
 #include "stats.h"
+#include "dsp.h"
 
 extern volatile unsigned char Tick;
 static long    palette[8]={0,0xFF0000,0x00FF00,0xFFFF00,0x0000FF,0xFF00FF,0x00FFFF,0xFFFFFF};
@@ -55,23 +57,22 @@
 int sdl_start()
 {
     char title[1024];
+    Uint32 flags = SDL_INIT_VIDEO|SDL_INIT_NOPARACHUTE;
     zoomChange = zoom;
 
     windowChanging=1;
 
     /* Init video blah */
 
-    if(!fullScreen) {
-        if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_NOPARACHUTE) < 0) {
-            fprintf(stderr, "Unable to init SDL: %s\n", SDL_GetError());
-            return 0;
-        }
-    } else {
-        fprintf(stderr, "Full!\n");
-        if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_NOPARACHUTE|SDL_FULLSCREEN) < 0) {
-            fprintf(stderr, "Unable to init SDL: %s\n", SDL_GetError());
-            return 0;
-        }
+    if(!fullScreen)
+        flags |= SDL_FULLSCREEN;
+    if (audio_method == AM_SDL)
+        flags |= SDL_INIT_AUDIO;
+
+    fprintf(stderr, "Full!\n");
+    if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_NOPARACHUTE|SDL_FULLSCREEN) < 0) {
+        fprintf(stderr, "Unable to init SDL: %s\n", SDL_GetError());
+        return 0;
     }
 
     /* 320x240x32 */
Index: src/host.c
===================================================================
--- src/host.c	(revision 5)
+++ src/host.c	(working copy)
@@ -387,7 +387,11 @@
 		serial_desc = -1;
 	}
 	else {
+#ifdef O_NDELAY
 		serial_desc=open(serial_name,O_RDWR | O_NDELAY);
+#else
+		serial_desc=open(serial_name,O_RDWR | O_NONBLOCK);
+#endif
 		if (serial_desc==-1) {
 			err("%s: %s",serial_name,strerror(errno));
 			err("Can't open communication port %s",serial_name);
@@ -425,7 +429,9 @@
 			initial_cycles=cycles=200*speed_index;
 		}
 		else if (g == 'S') {
-			if (strcmp (optarg, "arts") == 0)
+			if (strcmp (optarg, "sdl") == 0)
+				audio_method = AM_SDL;
+			else if (strcmp (optarg, "arts") == 0)
 				audio_method = AM_ARTS;
 			else if (strcmp (optarg, "auto") == 0)
 				audio_method = AM_ARTS_OSS;
Index: src/dsp.c
===================================================================
--- src/dsp.c	(revision 5)
+++ src/dsp.c	(working copy)
@@ -30,6 +30,7 @@
 #include <fcntl.h>
 #include <unistd.h>
 #include <sys/ioctl.h>
+#include <sys/param.h>
 
 #if HAVE_OSS
 #  include <linux/soundcard.h>
@@ -40,6 +41,9 @@
 #if HAVE_ALSA
 #  include <alsa/asoundlib.h>
 #endif
+#if HAVE_SDL
+#  include <SDL_audio.h>
+#endif
 
 #include "caloric.h"
 #include "dsp.h"
@@ -47,6 +51,11 @@
 #define SAMPLES 512
 
 
+#if HAVE_SDL
+int sdl_open (void);
+int sdl_write (const char *buf, size_t bufsz);
+int sdl_close (void);
+#endif
 #if HAVE_ARTS
 int arts_open (void);
 int arts_write_caloric (const char *buf, size_t bufsz);
@@ -63,7 +72,7 @@
 int alsa_close (void);
 #endif
 
-int audio_method = AM_ALSA;
+int audio_method = AM_SDL; /* let SDL choose the best by default */
 const char *audio_device = "/dev/dsp";
 char sound;
 int (*sound_write) (const char *buf, size_t bufsz) = NULL;
@@ -80,6 +89,22 @@
 {
     sound = 0;
 
+    if (audio_method == AM_SDL)
+    {
+#if HAVE_SDL
+        if (sdl_open () == 0)
+        {
+            sound_write = sdl_write;
+            sound_close = sdl_close;
+            return 0;
+        }
+        return 1;
+#else
+        err ("this Caloric binary was compiled without SDL support"); /* !? */
+        exit (1);
+#endif
+    }
+
     if (audio_method == AM_ARTS)
     {
 #if HAVE_ARTS
@@ -143,6 +168,7 @@
         }
         return 1;
 #else
+#if HAVE_OSS
         if (oss_open () == 0)
         {
             sound_write = oss_write;
@@ -150,6 +176,7 @@
             return 0;
         }
 #endif
+#endif
     }
     else
     {
@@ -159,6 +186,94 @@
 }
 
 
+#if HAVE_SDL
+#define SDLBUFS 2
+struct sdl_callback_data {
+    Uint8 buffers[SDLBUFS][SAMPLES/* * sizeof(Uint8)*/];
+    int head;
+    int tail;
+};
+
+static struct sdl_callback_data sdl_data;
+
+static void SDLCALL sdl_callback(void *userdata, Uint8 *stream, int len)
+{
+    struct sdl_callback_data *data;
+    Uint8 *buffer;
+    data = (struct sdl_callback_data *)userdata;
+    if (data->head == data->tail) {
+        memset(stream, 0, len);
+        return;
+    }
+    buffer = data->buffers[data->head];
+    data->head++;
+    data->head %= SDLBUFS;
+    memcpy(stream, buffer, len);
+}
+
+int sdl_open (void)
+{
+    int r;
+    SDL_AudioSpec spec;
+
+    /* 8-bit UNsigned PCM, 25600 Hz, mono */
+    spec.freq = 50 * SAMPLES;
+    spec.format = AUDIO_U8;
+    spec.channels = 1;
+    spec.silence = 0;
+    spec.samples = SAMPLES;
+    spec.padding = 0;
+    spec.size = SAMPLES * sizeof(Uint8);
+    spec.callback = &sdl_callback;
+    spec.userdata = &sdl_data;
+
+    r = SDL_OpenAudio(&spec, NULL/*&obtained*/);
+    if (r != 0)
+    {
+        err ("sdl_init: can't obtain the requested format");
+        return 1;
+    }
+
+    sound = 1;
+    /* start playback */
+    SDL_PauseAudio(0);
+    return 0;
+}
+
+
+int sdl_write (const char *buf, size_t bufsz)
+{
+    int r = 1;
+
+    /* mutex */
+	SDL_LockAudio();
+	
+	/* if there is a buffer left */
+	if (((sdl_data.tail + 1) % SDLBUFS) != sdl_data.head) {
+	    Uint8 *buffer = sdl_data.buffers[sdl_data.tail];
+	    memcpy(buffer, buf, MIN(SAMPLES*sizeof(Uint8), bufsz));
+	    sdl_data.tail++;
+	    sdl_data.tail %= SDLBUFS;
+	    r = 0;
+	} /* else drop */
+	
+	SDL_UnlockAudio();
+
+    return r;
+}
+
+
+int sdl_close (void)
+{
+    if (sound)
+    {
+        SDL_CloseAudio();
+    }
+    return 0;
+}
+#endif
+
+
 #if HAVE_ARTS
 static arts_stream_t arts_stream;
 
@@ -216,6 +331,7 @@
 #endif
 
 
+
 #if HAVE_OSS
 int oss_fd = -1;
 
Index: src/dsp.h
===================================================================
--- src/dsp.h	(revision 3)
+++ src/dsp.h	(working copy)
@@ -11,6 +11,7 @@
 /* Sound output method */
 enum
 {
+  AM_SDL,			/* let SDL select the best first (and native) */
   AM_ALSA,			/* ALSA or nothing */
   AM_ARTS,			/* libarts or nothing */
   AM_ARTS_OSS,			/* Try libarts first, fall back on OSS */
