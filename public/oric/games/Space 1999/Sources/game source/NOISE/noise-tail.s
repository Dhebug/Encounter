

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Some internal tables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; This two are por pixel_addresss
; table of row scan offsets relative to base_hires_address.

tab_scan
    .word    0,  80, 160, 240, 320, 400, 480, 560, 640, 720, 800, 880, 960,1040,1120,1200,1280,1360,1440,1520
    .word 1600,1680,1760,1840,1920,2000,2080,2160,2240,2320,2400,2480,2560,2640,2720,2800,2880,2960,3040,3120
    .word 3200,3280,3360,3440,3520,3600,3680,3760,3840,3920,4000,4080,4160,4240,4320,4400,4480,4560,4640,4720
    .word 4800,4880,4960,5040,5120,5200,5280,5360,5440,5520,5600,5680,5760,5840,5920,6000,6080,6160,6240,6320
    .word 6400,6480,6560,6640,6720,6800,6880,6960,7040,7120,7200,7280,7360,7440,7520,7600,7680,7760,7840,7920


; table of quotients & masks mod 6.  Format is a pair (a,b), where a = (2x) div 6, b = pixel mask.

tab_mod06
    .byte  0,32, 0,8, 0,2, 1,32, 1,8, 1,2, 2,32, 2,8, 2,2
    .byte  3,32, 3,8, 3,2, 4,32, 4,8, 4,2, 5,32, 5,8, 5,2
    .byte  6,32, 6,8, 6,2, 7,32, 7,8, 7,2, 8,32, 8,8, 8,2
    .byte  9,32, 9,8, 9,2,10,32,10,8,10,2,11,32,11,8,11,2
    .byte 12,32,12,8,12,2,13,32,13,8,13,2,14,32,14,8,14,2
    .byte 15,32,15,8,15,2,16,32,16,8,16,2,17,32,17,8,17,2
    .byte 18,32,18,8,18,2,19,32,19,8,19,2,20,32,20,8,20,2
    .byte 21,32,21,8,21,2,22,32,22,8,22,2,23,32,23,8,23,2
    .byte 24,32,24,8,24,2,25,32,25,8,25,2,26,32,26,8,26,2
    .byte 27,32,27,8,27,2,28,32,28,8,28,2,29,32,29,8,29,2
    .byte 30,32,30,8,30,2,31,32,31,8,31,2,32,32,32,8,32,2
    .byte 33,32,33,8,33,2,34,32,34,8,34,2,35,32,35,8,35,2
    .byte 36,32,36,8,36,2,37,32,37,8,37,2,38,32,38,8,38,2
    .byte 39,32,39,8,39,2

#ifndef FASTMULT

; this is used in fastmult

    ;; Table of squares (0-127)
    
sq_tableLO  
    .byte $0, $1, $4, $9, $10, $19, $24, $31, $40, $51, $64, $79, $90, $a9, $c4, $e1
    .byte $0, $21, $44, $69, $90, $b9, $e4, $11, $40, $71, $a4, $d9, $10, $49, $84, $c1
    .byte $0, $41, $84, $c9, $10, $59, $a4, $f1, $40, $91, $e4, $39, $90, $e9, $44, $a1
    .byte $0, $61, $c4, $29, $90, $f9, $64, $d1, $40, $b1, $24, $99, $10, $89, $4, $81
    .byte $0, $81, $4, $89, $10, $99, $24, $b1, $40, $d1, $64, $f9, $90, $29, $c4, $61
    .byte $0, $a1, $44, $e9, $90, $39, $e4, $91, $40, $f1, $a4, $59, $10, $c9, $84, $41
    .byte $0, $c1, $84, $49, $10, $d9, $a4, $71, $40, $11, $e4, $b9, $90, $69, $44, $21
    .byte $0, $e1, $c4, $a9, $90, $79, $64, $51, $40, $31, $24, $19, $10, $9, $4, $1

sq_tableHI
    .byte $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
    .byte $1, $1, $1, $1, $1, $1, $1, $2, $2, $2, $2, $2, $3, $3, $3, $3
    .byte $4, $4, $4, $4, $5, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8
    .byte $9, $9, $9, $a, $a, $a, $b, $b, $c, $c, $d, $d, $e, $e, $f, $f
    .byte $10, $10, $11, $11, $12, $12, $13, $13, $14, $14, $15, $15, $16, $17, $17, $18
    .byte $19, $19, $1a, $1a, $1b, $1c, $1c, $1d, $1e, $1e, $1f, $20, $21, $21, $22, $23
    .byte $24, $24, $25, $26, $27, $27, $28, $29, $2a, $2b, $2b, $2c, $2d, $2e, $2f, $30
    .byte $31, $31, $32, $33, $34, $35, $36, $37, $38, $39, $3a, $3b, $3c, $3d, $3e, $3f

#endif
	
	;; Table of inverted bytes for mirroring sprites


;tab_inverted_bytes
;	.byte $40,$60,$50,$70,$48,$68,$58,$78,$44,$64,$54,$74,$4C,$6C,$5C,$7C,$42,$62,$52,$72
;	.byte $4A,$6A,$5A,$7A,$46,$66,$56,$76,$4E,$6E,$5E,$7E,$41,$61,$51,$71,$49,$69,$59,$79
;	.byte $45,$65,$55,$75,$4D,$6D,$5D,$7D,$43,$63,$53,$73,$4B,$6B,$5B,$7B,$47,$67,$57,$77,$4F,$6F,$5F,$7F


tab_inverted_bytes
	.byte $00,$20,$10,$30,$08,$28,$18,$38,$04,$24,$14,$34,$0C,$2C,$1C,$3C,$02,$22,$12,$32
	.byte $0A,$2A,$1A,$3A,$06,$26,$16,$36,$0E,$2E,$1E,$3E,$01,$21,$11,$31,$09,$29,$19,$39
	.byte $05,$25,$15,$35,$0D,$2D,$1D,$3D,$03,$23,$13,$33,$0B,$2B,$1B,$3B,$07,$27,$17,$37,$0F,$2F,$1F,$3F



.)

; End of NOISE 

__noise_end

#echo Size of NOISE in bytes:
#print (__noise_end - __noise_start)
#echo



