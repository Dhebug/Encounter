// main.c by Barnsey123
// 22-03-2011 prog to draw a grid (for viking game)
// 23-03-2011 create new drawgrid function
// 30-03-2011 create new functions for drawing board/tiles
// 01-04-2011 use char instead of int where possible (compact code)
#include <lib.h>
const unsigned char boardx=12;		// starting x co-ord of board
const unsigned char boardy=0;		// starting y co-ord of board 
const unsigned char boxsize=17;		// box size;
// DRAW A BOX
void drawbox(unsigned char bx, unsigned char by, char dim)
{
curset(bx,by,1);
draw(dim,0,1);
draw(0,dim,1);
draw(-dim,0,1);
draw(0,-dim,1);	
}
// DRAW THE MAIN GRID
void drawgrid(unsigned char bcx, unsigned char bcy)
{
// draws the main grid 		***** ARGUMENTS *****
// bcx			= number of boxes across
// bcy			= number of boxes down
unsigned char x=boardx;
unsigned char y=boardy;
unsigned char c=0;			// counter
unsigned char lx=boxsize*bcx;	// calculate length of lines across
unsigned char ly=boxsize*bcy;	// calculate length of lines down
for (c=0;c<=bcx;c++) 		// draw vertical lines
	{
	curset(x,y,1);
	draw(0,ly,1);
	x+=boxsize;				// add boxsize to x
	}
x=boardx;						// reset x
for (c=0;c<=bcy;c++) 		// draw horizontal lines
	{
	curset(x,y,1);
	draw(lx,0,1);
	y+=boxsize;
	}
} 
// DRAW THE ATTACKER TILE
void attacktile(unsigned char ax, unsigned char ay)
{
	// draws the attackers tile
	// ARGUMENTS starting x, y position for curset
	char c=0;		// counter
	char z=13;		// line length
	for (c=0;c<3;c++)
		{
		drawbox(ax,ay,z);
		z=z-4;
		ax+=2;
		ay+=2;	
		}
}
// DRAW THE DEFENDER TILE
void defendtile(unsigned char dx, unsigned char dy)
{
	// draws the defenders tile
	// ARGUMENTS starting x, y position for curset
	unsigned char c=0;		// counter
	char z=13;	// line length
	for (c=0;c<2;c++)
		{
		drawbox(dx,dy,z);
		z=z-4;
		dx+=2;
		dy+=2;	
		}
}
// DRAW THE KING TILE
void kingtile(unsigned char kx, unsigned char ky)
{
	// draws the king tile
	// ARGUMENTS starting x, y position for curset
	drawbox(kx,ky,5);
	drawbox(kx+8,ky,5);
	drawbox(kx,ky+8,5);
	drawbox(kx+8,ky+8,5);
	drawbox(kx+2,ky+2,9);
}
// DRAW THE BOARDS TILES
void drawtiles()
{
	// draws the tiles on the board
	// ARGUMENTS starting x,y position of grid, size of box
	// populate tiles with tile type
	// 0=blank
	// 1=king square
	// 2=attacker square
	// 3=defender square
	int tiles[11][11]={
		{1,0,0,2,2,2,2,2,0,0,1},
		{0,0,0,0,0,2,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},
		{2,0,0,0,0,3,0,0,0,0,2},
		{2,0,0,0,3,3,3,0,0,0,2},
		{2,2,0,3,3,1,3,3,0,2,2},
		{2,0,0,0,3,3,3,0,0,0,2},
		{2,0,0,0,0,3,0,0,0,0,2},
		{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,2,0,0,0,0,0},
		{1,0,0,2,2,2,2,2,0,0,1}};
	unsigned char tsx=boardx+2;					// offset by 2
	unsigned char tsy=boardy+2;					// offset by 2
	int tiletype=0;
	int row=0;			// loop through tiles array by row
	int col=0;			// loop through tiles array by column	
	for (row=0;row<11;row++)
		{
		for (col=0;col<11;col++)
			{
			tiletype=tiles[row][col];
			if ( tiletype == 1 ) kingtile(tsx,tsy);
			if ( tiletype == 2 ) attacktile(tsx,tsy);
			if ( tiletype == 3 ) defendtile(tsx,tsy);
			tsx+=boxsize;			
			}
		tsx=boardx+2;
		tsy+=boxsize;
		}
}
// MAIN PROGRAM
main()
{	
hires();
ink(6);
drawgrid(11,11); // 11,11=11 boxes across x 11 boxes down
drawtiles();
}
